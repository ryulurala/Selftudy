-------------------------------------------------------------------------------
[Git CLI 버전관리-1: 수업 소개]

* CLI 환경의 장점
- 자동화 가능(명령어를 한꺼번에 처리)
- GUI가 안되는 인스턴스도 사용 가능

-------------------------------------------------------------------------------
[Git CLI 버전관리-2: 설치]

- git-scm.com에서 설치

-------------------------------------------------------------------------------
[Git CLI 버전관리-3: 버전관리 시작]

* Git의 버전관리 시작
1) 디렉토리 생성
2) 해당 디렉토리에서 [git init .] 명령어 입력: .git 생성()
- (.git): repository = 버전 저장소
-------------------------------------------------------------------------------
[Git CLI 버전관리-4: 버전 만들기]

* 버전관리(1->2->3->4)
1) Working tree: 현재 로컬 장소, [git add]로 Changed file을 Staging Area에 올린다.
2) Staging Area: 수정한 내역, [git commit -m "message"]로 Repository(지역)로 저장(버전 생성)
3) Repository(지역): 버전 저장소(origin) [git push origin master]로 원격으로 동기화
4) Repository(원격): 원격 버전 저장소(master) ex) github, gitlab 등

- [git status]로 Working tree에서의 Changed file 조회
- [git log]로 commit(버전) 내역 조회

-------------------------------------------------------------------------------
[Git CLI 버전관리-5: 여러 개의 파일을 버전으로 만들기]

- 위와 같음

-------------------------------------------------------------------------------
[Git CLI 버전관리-6: 버전 간의 차이점 비교]

* Working tree의 파일과 마지막 commit과의 비교
- [git diff]를 통해서 현재 파일과 마지막 commit과의 차이점
- [git reset --hard]를 통해서 마지막 commit으로 돌아감

-------------------------------------------------------------------------------
[Git CLI 버전관리-7: checkout과 시간여행]

* 시간 여행(과거 or 미래)
- [git checkout (commit id)] : 해당 commit으로 돌아간다.
- 삭제된 것이 아니다!
- [git log]로 HEAD가 가리키는 곳을 확인

-------------------------------------------------------------------------------
[Git CLI 버전관리-8: 보충 수업]

- [git add (URL)]: 파일 or 디렉토리 모두 가능
- [git commit -am "message"] : add와 commit을 동시에 가능
- [git commit]: 디폴트 에디터로 commit message를 작성할 수 있다.
- [git config --global core.editor "(에디터 URL)"]: 디폴트 에디터를 설정

-------------------------------------------------------------------------------
[Git CLI 버전관리-9: 삭제-git reset]

* 버전 삭제(해당 commit으로 되돌아가서 위의 버전 삭제) vs checkout: 버전 삭제X(only 되돌아감)
- [git reset (commit id)]: only 버전 삭제(commit id로 되돌아가고 윗 버전들 삭제)
- [git reset --hard (commit id)]: 버전 + Working tree의 수정한 부분까지 삭제
- [git reset HEAD^]: 최신 커밋 버전 삭제

- 공유된 버전에 대해서 reset하면 안된다.(공유되기 전까지만 reset)

-------------------------------------------------------------------------------
[Git CLI 버전관리-10: 되돌리기-git revert]

* git revert로 되돌아가기
- [git revert (commit id)]: 해당 commit의 추가되었던 버전을 취소하고 최신 commit(삭제하지는 않음)
- revert는 역순서로 버전 하나씩 되돌려야 된다.(충돌 방지)
- 충돌 해결은 엄청 어렵다.

-------------------------------------------------------------------------------
[Git CLI 버전관리-11: 수업을 마치며]

* 되돌아가기(1, 2, 3 모두 해당 commit id로 되돌아감)
1) checkout: 시간여행, 여러 버전으로 이동, 버전 삭제X
2) reset: 버전 삭제, Working tree 수정(--hard) or 수정 X(--soft)
3) revert: 되돌아간 버전으로 최신 업데이트(역순으로 하나씩)

* 다른 기능
- .gitignore: git으로 버전관리하기 싫은 파일들 List 작성
- branch: 하나의 저장소를 다양한 작업 진행(분할 작업)
- tag: 옵션으로 다양한 표현
- backup: Github, Gitlab 이용

-------------------------------------------------------------------------------
===============================================================================
-------------------------------------------------------------------------------
[Github.com-1: 수업소개]

* 저장소
- Dropbox
- Google Drive
- OneDrive
- iCloud

* 버전 관리 시스템(for 협업)
- CVS
- SVN
- GIT: by 리눅스 토발즈

* Dropbox vs Git
- Dropbox: dropbox.com Server + Dropbox Client, 회사가 만듬(서버 고정)
- Git: Git Server + Git Client, 오픈 소스(서버 변경 가능)

-------------------------------------------------------------------------------
[Github.com-2: 저장소 생성]

* github.com(Git 시스템을 사용하는 저장소 중에 하나)
Sign In : 로그인
Sign Up : 회원 가입

* 용어
- Repository: 저장소(위치)
- Commits: 버전(변화)들
- Contributors: 기여자들
- Star: 좋아요!
- Watch: 구독!
- Fork: 내 저장소에 복제

-------------------------------------------------------------------------------
[Github.com-3: 버전 생성]

* 버전 생성
- on Web
1) 파일 생성, 변경
2) commit을 하여 일지 작성

-------------------------------------------------------------------------------
[Github.com-4: git 구경하기]

* 명령어
- git clone (원격 저장소 주소): 프로젝트 복제
- git diff: 지역 저장소와 원격 저장소 차이를 조회
- git commit -m "(message)": 일지 작성
- git log: 버전 조회
- git add: commit 준비
- git push: 지역 저장소(origin) -> 원격 저장소(master)
- git status: 현재 상태(지역 저장소에서의 변화)

* 지역 저장소 -> 원격 저장소 순서
1) 파일 변경 및 생성
2) git add (파일 url)
3) git commit -m "(message)"
4) git push

-------------------------------------------------------------------------------
[Github.com-5: 멤버]

* 프로젝트 멤버 추가(협업자 추가)
1) Settings
2) Manage access
3) Invite a collaborator
4) 사용자 추가(이메일 or Github ID)

-------------------------------------------------------------------------------
[Github.com-6: 이슈]

* Issues
- 토론, 토의 내용
- 질문 내용 등

* 이슈 만들기
- 담당자 지정
- 라벨 지정(추가 가능)
- 제출

- Close Issus를 통해서 문제 해결

-------------------------------------------------------------------------------
[Github.com-7: 수업을 마치며]

* Wiki
- 설명서
- 프로젝트와 관련된 지식

* Insights
- 지표
- 모니터

* Pull Request
- Fork한 것을 잘 만들어서 본래의 프로젝트에게 합치는 것을 요구

****** Action !중요! ******
- 테스트 코드를 지정 가능!
ex) 누군가가 push를 하면 해당 코드를 실행해준다 등

* Project
- Trello, Notion 등의 카드 형태로 View를 제공
-------------------------------------------------------------------------------