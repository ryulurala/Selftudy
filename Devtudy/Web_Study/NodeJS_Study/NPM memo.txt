--------------------------------------------------------------------
[NPM-1: 수업 소개]

* CLI 환경에서의 App Store
- apt
- yum
- maven
- npm(Node Package Manager): Node.js의 기본 패키지 관리자
- pip
- composer
- rubygems

--------------------------------------------------------------------
[NPM-2: npm 설치]

* 설치
1) nodejs.org에 접속
2) Node.js 설치(패키지에 포함)
3) npm 설치 완료
4) npm -v (in CLI 환경): 버전 확인

--------------------------------------------------------------------
[NPM-3: 패키지 검색과 설치 & 실행]

* 패키지 검색
- npmjs.com
- p: 인기도

* 패키지 설치
- 패키지 설치 방법은 CLI 환경에서의 명령어로 설치한다.
1) 독립적인 설치: npm install -g (해당 package) -> 어디에서나(Global): 관리자 권한(sudo)이 필요!
2) 종속적인 설치: npm install (해당 package) -> 해당 디렉토리만

* 패키지 실행
- 해당 패키지의 설명서 확인

--------------------------------------------------------------------
[NPM-4: 패키지의 목록 보기와 Update & Delete]

* 패키지 목록 보기
- npm list: 현재 디렉토리 package 조회
- npm list -g : 전역적인 package 조회
- npm list -g --depth=0: package의 최상위 목록 조회
- npm list -g --depth=1: package의 최상위 목록의 부품 조회
- ...

* 패키지 Update
- npm update (해당 package): 현재 디렉토리의 해당 package update
- npm update -g (해당 package): 전역적인 해당 package update

* 패키지 Delete
- npm uninstall (해당 package): 현재 디렉토리의 해당 package 삭제
- npm uninstall -g (해당 package): 전역적으로 해당 package 삭제

--------------------------------------------------------------------
[NPM-5: 수업을 마치며]

- NPM은 패키지를 만들고 배포하는데 중요한 역할을 한다.

--------------------------------------------------------------------
====================================================================
--------------------------------------------------------------------
[NPM Package-1: 수업 소개]

* 내 패키지를 만들고 배포
- 패키지를 NPM registry에 업로드(npm publish)
- 패키지를 NPM registry에서 다운로드(npm install)

--------------------------------------------------------------------
[NPM Package-2: 수업의 목표]

* 목표
1) 패키지를 만들기
2) 배포
3) 다시 설치
4) 똑같은 실행 결과

--------------------------------------------------------------------
[NPM Package-3: 모듈 만들기]

* 모듈 생성
1) npm init(package.json 파일 생성)
2) package name 입력: @ryul과 같은 scope(범위)를 prefix로 시작(권장)
3) 버전 지정: 바로 Enter하면 ()버전으로 생성
4) description: 설명
5) end point 지정: 어떤 파일이 입구 파일 ex) index.js
6) 나머지 default로 하여 지정하면 최종적으로 package.json 파일 생성
7) main 확인 후 파일 작성(default는 index.js)
8) module.exports = {ko:'안녕', en:'hi'} : require할 경우의 인사말

--------------------------------------------------------------------
[NPM Package-4: NPM Registry-패키지 업로드 하기]

* NPM Registry(npmjs.com)에 업로드
1) npmjs.com에서 Sign up + Sign in
2) npm login
3) npm publish --access public: 무료
or 3) npm publish --access private: 유료

--------------------------------------------------------------------
[NPM Package-5: 패키지 사용하기]

* 패키지 설치
1) 해당 디렉토리에서 npm init -y: 디폴트로 package.json 생성
2) npm install (Package 이름): 다운로드 & 설치

* 패키지 실행
1) 파일 생성(.js)
2) var greeting = require('Package 이름');
3) 실행(node)

* 패키지 Update(개발자)
1) 패키지 파일을 변경
2) package.json에서 version을 수정(필수!)
3) npm publish: 업로드

* 패키지 Update(사용자)
1) npm outdated로 현재 버전, 업데이트 될 수 있는 버전, 최신 버전 확인
2) package.json 파일에서 버전을 수정(범위 수정 이용 ex: '~'): 자동 업데이트 범위를 설정
- dependencies가 있을 경우만 해당

3) npm update: 다운로드

--------------------------------------------------------------------
[NPM Package-6: 명령행 프로그램 만들기]

* CLI 환경에서 사용 가능한 패키지 생성
1) cli.js 파일 생성(다른 이름도 가능)
- 여러 파일 연결
- process.argv: 입력 가능하도록(scanf, cin과 같은), argv[2]부터 입력 요소

2) ./cli.js (argument) : (argument) 입력하여 실행
- permission 거부 당할 때, ls -al (해당 파일)로 권한을 볼 수 있다.
ex)
  -rw-r--r--: rw-는 소유자의 권한, -가 x로 바뀌면 실행의 권한이 있다.
#!/usr/bin/env node로 node 런타임으로 실행 가능하도록 한다.

3) 설정-package.json(for 사용자도 CLI 실행)
ex) package.json에 추가(bin에 link 설정)
  "bin"{
    "say-hi": "./cli.js",
    "say-hi-kr": "./cli-kr.js",
  }

--------------------------------------------------------------------
[NPM Package-7: 패키지 설치하고 실행하기]

* 전역적, 지역적에 설치 방법에 따라 실행 상이
1) npm install -g (Package 이름): 전역적 설치
- 전역적 설치는 바로 실행 가능

2) npm install (Package 이름): 해당 디렉토리
- 지역적 설치는 해당 디렉토리에서만 실행 가능

--------------------------------------------------------------------
[NPM Package-8: NPX & 수업을 마치며]

- npm이 설치돼 있으면 npx도 있다.

* NPX 실행 도구 이용
1) npx (Package 이름): 설치 -> 실행 -> 삭제
2) npx -p (Package 이름) ... : 실행 방법이 다른 경우의 실행
- 장점
1: 찌꺼기가 남지 않는다
2: 버전 의존성이 없으므로 최신 버전으로 실행 가능하다. (최고의 장점)
3: 지역에 있으면 실행, 없으면 전역 실행, 전역도 없다면 다운로드 후 실행 (최고의 장점)

- 단점
1: 느리다(다운 받고 실행하므로)

--------------------------------------------------------------------
