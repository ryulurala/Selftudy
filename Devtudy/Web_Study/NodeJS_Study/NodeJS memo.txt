------------------------------------------------------------------------------------------------------------------
[NodeJS-1: 수업 소개]

* 역사
1990 - Tim Berners-Lee에 의해 Web이 탄생.
1994 - Marc Andreessen에 의해 Netscape Navigator라는 Web browser 탄생.
1995 - Brendan Eich가 만든 JavaScript 등장으로 Web의 Html의 정적인 페이지가 JavaScript의 동적인 페이지 제어가 가능하게됨.
2004 - Google의 GMail, GMap Application 등장.
2008 - Google의 Chrome browser 발표. V8 Engine을 개발하고 Open source로 공개하여 JavaScript가 Web분야 외에 다른 곳에서도 사용하게 됨.
2009 - Ryan Dahl의 Node.js 개발.
- Node.js = V8 Engine + Event-driven + Non-blocking I.O

* HTTP(Hypertext Transfer Protocol) : html을 Web에서 주고 받는 규칙
- Web browser -> Web server Request Headers를 보낼 때 규칙.
- Web server -> Web browser Response Headers를 보낼 때 규칙.


------------------------------------------------------------------------------------------------------------------
[NodeJS-2: 수업 목적]

* HTML < JavaScript
(코드가 길어질수록)
- 재사용성
- 가독성
- 유지보수
- 사용자의 참여를 동적으로 대응이 가능하다.
- Client부터 Server까지 프로그래밍이 가능하다.

* Node.js의 장점
- 속도(Google의 V8 Engine을 사용하기 때문에)
- Event-driven program
- Non-blocking I.O

* Node.js의 경쟁자
Serverside의 
- Python
- JAVA
- PHP
- Ruby

------------------------------------------------------------------------------------------------------------------
[NodeJS-3: 설치 & 실행]

* JavaScript
- Language 측면 : JavaScript (ex. 비유 : 한국어), (ex. alert('Hello world') : JavaScript의 function)
- Runtime 측면 : Web browser, Node.JS (ex. 비유 : 의학용어, 법 용어 등) (ex. alert('Hello world') : Only Web browser, Node.JS에서 Error)

* 비교
- WEB Application : HTML(문법) : WEB Browser
- Node.js Application : JavaScript(문법) : Node.js runtime

* 설치(Node.js runtime 설치)
1) Windows: nodejs.org 접속하여 Node.js 설치
2) Linux(ubuntu): 터미널에 sudo apt-get install -y nodejs 입력
- 확인 : 콘솔 or 터미널에서 node --version 또는 node -v 입력

* 실행
- sudo chown ubuntu . 를 입력하여 권한을 관리자로 바꾸고 node로 실행.
- 실행할 때마다 앞에 sudo를 입력하여 실행.
- 실행(Linux, Mac, Window 모두): node (파일 이름).js 또는 (.js) 생략하여 입력

* 화면에 출력
-> Console.log('Hello world');

------------------------------------------------------------------------------------------------------------------
[NodeJS-4: 공부 방법]

* for Node.js Web Application
- JavaScript 문법으로 Node.js runtime 기능 실행

------------------------------------------------------------------------------------------------------------------
[NodeJS-5: Node.js로 웹 서버 만들기]

* 인터넷 동작 방법
Client -------(Internet)------- Server

Client와 Server는 상대적인 개념
- Client는 Web browser가 설치돼있는 컴퓨터(정보 요청)
- Server는 (정보 응답)

Domain : 컴퓨터에 접속하기 쉽게 별명
IP address : Domain에 해당되는 구체적인 주소

Port : 0 ~ 65536(2^16-1), Client가 Server안의 요청하는 위치.

서버의 종류
- DB 서버
- 채팅 서버
- 게임 서버
- 웹 서버(http - port : 80) : Port 번호는 생략 가능하다.(웹은 많이 사용하므로)

ex) 웹 서버 예제 코드(.js)
const http = require('http');

const hostname = '127.0.0.1';
const port = 1337;

http.createServer((req, res) => {					// Server를 만듬.(return은 Server라는 객체)
	res.writeHead(200, { 'Content-Type' : 'text/plain' });		// 'res'ponse : 응답
	res.end('Hello World\n');					// 'res'ponse : 응답
}).listen(port, hostname, () => {					// listen을 함. 1. port번호, 2. hostname : IP address라고 생각하면 됨.
	console.log(`Server running at http://${hostname}:${port}/`);	// Server 화면 출력
});

------------------------------------------------------------------------------------------------------------------
[NodeJS-6, 7, 8, 14, 15, 16, 17, 18: JavaScript 문법(Syntax)]

* JavaScript의 Data Type
- 기본 자료형(Primitive)
1) Boolean: true, false("", null, undefined, 0, NaN) 값을 가진다.
2) Null: null값을 가진다.
3) Undefined: 값을 할당하지 않은 변수, undefined 값을 가진다.
4) Number: 64bits 숫자 값(정수/소수 구분 X), Infinity, -Infinity, Nan 값을 가진다.
5) String: 문자열, Immutable:수정 불가능(부분적으로 substr(), '+'로 가능)
6) Symbol (ECMAScript 6에 추가됨): 객체의 식별자로 사용된다, 모든 심볼값은 고유하다.(무조건 하나만 존재)

- 사용자 정의형(Object)
∞) ... (무한대)

* 변수(Variable)
- var로 선언(권장O): var을 생략 가능하다(권장X)

* Template literals(ES6부터)
- 문자열에서 개행이 허용되지 않아 '\'로 해야하는 번거로움 해결
- ` : grabe accent, backtick 문자를 시작과 끝에 배치하여 사용
- $변수명: 변수 출력
- '+' 연산을 사용하지 않고
- HTML 태그도 인식한다.

* 비교 연산자
1) '==' vs '==='(권장): '=='는 같다 vs '==='는 완전히 같다. '==='를 권장!
2) > or <: 좌항이 크다 or 우항이 크다
3) >= or <=: 좌항이 크거나 같다 or 우항이 크거나 같다

* Console에 입력값 넣기
ex)
var args = process.argv;
console.log(args);
- Console에서 node (.js 파일) (argument)을 입력하면
[0] = node.exe 위치 --- 고정
[1] = .js 파일 위치 --- 고정
[2] = (argument)값. 띄어쓰기로 구분되어 [3], [4], ... 늘어난다. --- 유동적

------------------------------------------------------------------------------------------------------------------
[NodeJS-9, 10: URL]

* URL(Uniform Resource Locator)
- 데이터 위치를 나타내는 값.

ex) http://naver.com:8080/main?id=HTML&page=12
- http: Protocol
- //naver.com: Host(Domain)
- :8080: Port
- /main: Path
- ?id=HTML&page=12: Query String, ?로 시작하고, 변수와 변수는 & 구분, 변수=값으로 전달

ex) Query String을 출력
  var http = require("http");
  var fs = require("fs");
  var url = require("url"); // url 모듈을 사용

  var app = http.createServer(function (request, response) {
    var _url = request.url;
    console.log("url :>> ", _url);			// query string 출력 ex) ?id=HTML
    var queryData = url.parse(_url, true).query;
    console.log("queryData.name :>> ", queryData.name);		// 출력 ex) HTML

    if (_url == "/") {
      _url = "/public/index.html";
    }
    if (_url == "/favicon.ico") {
      return response.writeHead(404);
    }
    response.writeHead(200);
    response.end(queryData.name);		// queryData.name을 보내준다.
    // response.end(fs.readFileSync(__dirname + _url)); // 파일을 읽음
  });
  app.listen(8080);

- 주소창에 localhost:8080/?name=HTML 입력

------------------------------------------------------------------------------------------------------------------
[NodeJS-11, 12, 13: 동적인 웹 페이지 만들기]

ex) Query String을 이용한 동적인 웹 페이지
  var http = require("http");
  var fs = require("fs");
  var url = require("url"); // url 모듈을 사용

  var app = http.createServer(function (request, response) {
    var _url = request.url;
    console.log("url :>> ", _url);
    var queryData = url.parse(_url, true).query;
    console.log("queryData.id :>> ", queryData.id);
    var title = queryData.id;

    if (_url == "/") {      // 홈(root)으로 들어오면 "Welcome" 출력
      title = "Welcome";
    }
    if (_url == "/favicon.ico") {
      return response.writeHead(404);
    }
    response.writeHead(200);
    var template = `    // 탬플릿 리터럴로 편하게 보간
    <!DOCTYPE html>
  <html>
    <head>
      <title>WEB1 - ${title}</title>
      <meta charset="utf-8" />
    </head>
    <body>
      <h1><a href="/">WEB</a></h1>    // 홈(root)으로 간다.
      <ul>
        <li><a href="/?id=HTML">HTML</a></li>
        <li><a href="/?id=CSS">CSS</a></li>
        <li><a href="/?id=JavaScript">JavaScript</a></li>
      </ul>
      <h2>${title}</h2>
      <p>
        The World Wide Web (abbreviated WWW or the Web) is an information space
        where documents and other web resources are identified by Uniform Resource
        Locators (URLs), interlinked by hypertext links, and can be accessed via
        the Internet.[1] English scientist Tim Berners-Lee invented the World Wide
        Web in 1989. He wrote the first web browser computer program in 1990 while
        employed at CERN in Switzerland.[2][3] The Web browser was released
        outside of CERN in 1991, first to other research institutions starting in
        January 1991 and to the general public on the Internet in August 1991.
      </p>
    </body>
  </html>`;

    response.end(template);
  });
  app.listen(8080);

* 파일 읽기 기능
- CRUD(Create, Read, Update, Delete)의 Read
- 파일 내용을 바꿔도 실행될 때만 읽기 때문에 서버는 계속 실행될 수 있다.
- fs.readFile(path[, option], callback) 이용

ex) 파일 읽기 예제
var fs = require("fs"); // file system 모듈 추가

fs.readFile("./public/sample.txt", "utf-8", function (err, data) {
  // utf-8 옵션 이용하여 출력
  // node를 실행한 위치(해당 .js파일의 위치가 아니다)
  console.log(data);
});

ex) 파일을 이용해 본문 읽기
var http = require("http");
var fs = require("fs");
var url = require("url"); // url 모듈을 사용

var app = http.createServer(function (request, response) {
  var _url = request.url;
  var queryData = url.parse(_url, true).query;
  var title = queryData.id;

  if (_url == "/") {
    title = "Welcome";
  }
  if (_url == "/favicon.ico") {
    return response.writeHead(404);
  }
  response.writeHead(200);
  fs.readFile(`./public/data/${title}.txt`, "utf-8", function (
    err,
    description
  ) {
    var template = `
  <!DOCTYPE html>
<html>
  <head>
    <title>WEB1 - ${title}</title>
    <meta charset="utf-8" />
  </head>
  <body>
    <h1><a href="/">WEB</a></h1>
    <ul>
      <li><a href="/?id=HTML">HTML</a></li>
      <li><a href="/?id=CSS">CSS</a></li>
      <li><a href="/?id=JavaScript">JavaScript</a></li>
    </ul>
    <h2>${title}</h2>
    ${description}
  </body>
</html>`;
    console.log("title :>> ", title);
    response.end(template);
  });
});
app.listen(8080);

------------------------------------------------------------------------------------------------------------------
[NodeJS-19: App 제작]

* Not found 구현
ex) 예제(URL request로 구현)
  if(url.parse(request.url, true).pathname === '/'){  // 홈부터 갔을 경우
    response.writeHead(200); // 파일을 성공적으로 전송
    response.end(template);
  }else{    // 홈 외에 부터 갈 경우(다른 queryData가 들어옴)
    response.writeHead(404); // 파일을 찾을 수 없다는 코드 전송
    response.end("Not found!");
  }

* 홈 페이지 구현
- query.id로 구분하여 구현한다.

------------------------------------------------------------------------------------------------------------------
[NodeJS-20: JavaScript-반복문]

* while, for
- 프로그래밍 언어들과 문법이 같다(C, C++, C#, Java 등)
- while(실행되는 조건) { ... }
- for(; 실행되는 조건; ) { ... }

------------------------------------------------------------------------------------------------------------------
[NodeJS-21: JavaScript-배열]

* 배열(Array)
- JavaScript의 배열 정의는 "[ ]"(대괄호)를 사용한다.
- 데이터 집합
- 0 번째부터 indexing
- 배열.push(데이터): 뒤에 데이터를 추가한다.

ex)
var arr = ['A', 'B', 'C', 'D'];   // 대괄호("[ ]")를 사용한다.
arr.length;    // 원소 갯수
arr.push('Z');    // 뒤에 'Z' 추가

------------------------------------------------------------------------------------------------------------------
[NodeJS-22: JavaScript-배열과 반복문]

- 배열을 반복문을 통해서 대규모 데이터 처리가 가능하다.
ex)
  var number = [1, 2, 3, 4, 5];
  var i=0;
  while(i<number.length){
    console.log(number[i]);
    i=i+1;
  }

------------------------------------------------------------------------------------------------------------------
[NodeJS-23: 파일 목록 알아내기]

ex) readdir.js
  var testFolder = "./public/data";
  var fs = require("fs");     // file system 이용

  fs.readdir(testFolder, function (err, files) {
    console.log(files);
  });

------------------------------------------------------------------------------------------------------------------
[NodeJS-24: APP 제작-글 목록 출력하기]

* 글 목록 출력
ex) 글 목록을 읽어서 출력한다.
  fs.readdir("./public/data", function (err, files) {
    var title = "Welcome";
    var list = "<ul>";
    for (i = 0; i < files.length; i++) {
      var index = files[i].lastIndexOf(".");    // 확장자 제거
      files[i] = files[i].substring(0, index);
      list += `<li><a href="/?id=${files[i]}">${files[i]}</a></li>`;
    }
    list += "</ul>";
    // 내용...
  });

- indexOf("찾을 문자"): 인덱스 반환(왼쪽에서부터 찾음)
- lastIndexOf("찾을 문자"): 인덱스 반환(오른쪽에서부터 찾음)
- substring(시작 인덱스, 끝 인덱스): 부분 문자열 반환

------------------------------------------------------------------------------------------------------------------
[NodeJS-25: JavaScript-함수]

* 함수(Function)
- 중복 제거
- 가독성 증가

ex) 함수 정의와 호출
  // 함수 정의
  function func1(){
    // ...
  }
  func1();   // 호출

ex) 매개 변수(parameter), 인자(argument)
  function func2(parameter){    // 매개 변수로 받는다.
    // ...
  }
  func2(argument);  // 인자를 넘긴다.

ex) 반환(return)
  function func3(parameter){
    // ...
    return variable;    // 반환(함수의 출력)
  }
  var _variable = func3(argument);    // return 값을 받음
- return을 만나면 즉시, 함수 종료

------------------------------------------------------------------------------------------------------------------
[NodeJS-26: APP 제작-함수 이용하기]

- 중복된 것을 함수 처리
ex) main.js
function templateHTML(title, list, body) {
  return `
    <!DOCTYPE html>
    <html>
      <head>
        <title>WEB1 - ${title}</title>
        <meta charset="utf-8" />
      </head>
      <body>
        <h1><a href="/">WEB</a></h1>
        ${list}
        ${body}
      </body>
    </html>`;
}

function templateList(files) {
  var list = "<ul>";
  for (i = 0; i < files.length; i++) {
    var index = files[i].lastIndexOf(".");
    files[i] = files[i].substring(0, index);
    list += `<li><a href="/?id=${files[i]}">${files[i]}</a></li>`;
  }
  list += "</ul>";
  return list;
}

------------------------------------------------------------------------------------------------------------------
[NodeJS-27, 28: NodeJS-동기와 비동기]

* Synchronous(동기) vs Asynchronous(비동기)
- Synchronous(동기): 일을 시키고 그 일이 끝나야 그 다음에 처리(묶여 있다)
- Asynchronous(비동기): 일을 시키고 그 일이 끝날 때까지 다른 일을 처리(풀려 있다)

* JavaScript의 API
- ...Sync(): 동기 함수
- ...(, , , ..., 콜백 함수): 비동기 함수-마지막은 콜백 함수(err, result)로 약속돼있다.

* Call-back 함수
- Call-back(): 함수의 실행이 끝난 후 실행되는 함수

ex) File system의 파일 읽기
  var fs = require('fs');
  fs.readFile('....txt', 'utf8', function(err, result){
    // ...
  });
- 파일을 읽은 후에 콜백 함수 호출
- 비동기 함수의 마지막 매개 변수는 콜백 함수이다.
- 이름이 없으므로 익명 함수이다.

ex) JavaScript의 함수 정의 두 가지
  function a(){     // a를 정의하며 함수를 정의
    // ...
  }
  var a = function(){     // 익명 함수를 정의한 후 a에 할당
    // ...
  }
  a();      // JavaScript에서는 두 가지 정의 모두 같다.(함수도 값이다)

ex) 콜백 함수 정의
function a(){
  // ...
}

function b(callback){
  callback();
}
b(a);
- b()의 매개변수로 a()를 전달하여 b()가 실행하는 함수가 a()이다.
- a()가 콜백 함수이다.

------------------------------------------------------------------------------------------------------------------
[NodeJS-29: PM2]

* PM2
- NPM(Node Package Manager)을 이용하여 설치할 수 있다.
- Node의 Process가 꺼지면 다시 실행시켜준다
- 수정을 감시하고 자동으로 프로세스를 껐다 켜준다.(--watch 옵션 이용)
- 설치: [npm install pm2 --global]
- 실행: [pm2 start (js파일)]: js파일을 실행
(--watch 옵션으로 수정 후 자동 실행)
(--no-daemon 옵션으로 노백그라운드 실행)
(--ignore 옵션)
- 감시: [pm2 monit]
- 목록 조회: [pm2 list]: 현재 pm2 실행 프로세스 목록 조회
- 중지: [pm2 stop (js파일)]: js파일 실행 종료
- 삭제: [pm2 delete <id|name>]: 등록된 목록에서 해당 프로세스 삭제
- log: [pm2 log]: 에러 or 수정에 대한 로그 출력
- 종료: [pm2 kill]: pm2로 켠 프로세스들 모두 종료

ex)
[pm2 start (js파일) --no-daemon --watch]: 수정 후 자동 실행 및 포그라운드에서 log 출력
[pm2 start (js파일) --no-daemon --watch --ignore-watch="해당 디렉토리"]: 해당 디렉토리의 수정을 추적하지 않아 재실행 방지

------------------------------------------------------------------------------------------------------------------
[NodeJS-30: HTML-form]

* form tag
- HTML의 기능
- 각각의 control을 submit 버튼을 눌렀을 경우 query string 형태로 전송
ex) form.html
<form action="http://localhost:8080/process_create" method="post">    // 전송
  <p>
    <input type="text" name="title">    // 제목
  </p>
  <p>
    <textarea name="description"></textarea>    // 본문
  </p>
  <p>
    <input type="submit">     // submit 버튼을 눌렀을 경우 action
  </p>
</form>
- URL은 길이가 한정돼있다.
- 필요한 데이터는 URL로 전송하면 안된다.("post" 방식을 써야 한다)
- 서버로 수정, 삭제 등의 전송은 반드시 method = "post"를 써야한다.
- 서버로부터 사용자가 가져올 때(Get)는 method = "get"을 쓴다.
- method가 생략될 경우도 get이다.

------------------------------------------------------------------------------------------------------------------
[NodeJS-31: App 제작-글 생성 UI 만들기]

* 글 생성 UI 제작
- form 태그를 이용한다.

ex) /create 링크에 접근할 경우
  else if (pathName === "/create") {
    fs.readdir("./public/data", function (err, files) {
      var title = "WEB - create";
      var list = templateList(files);
      var template = templateHTML(
        title,
        list,
        `
        <form action="http://localhost:8080/create_process" method="post">
          <p><input type="text" name="title" placeholder="title"></p>
          <p>
            <textarea name="description" placeholder="description"></textarea>
          </p>
          <p>
            <input type="submit">
          </p>
        </form>
        `
      );
      response.writeHead(200); // 파일을 성공적으로 전송
      response.end(template);
    });
  }

------------------------------------------------------------------------------------------------------------------
[NodeJS-32: App 제작-POST 방식으로 전송된 데이터 받기]

* 서버 응답
- request: 요청할 때 서버가 받는 데이터
- response: 응답해줄 때 서버가 주는 데이터

ex) post 방식을 처리
  else if (pathName === "/create_process") {
    // Post 방식의 request 데이터 받기
    var body = "";
    request.on("data", function (data) {
      // 주기마다 실행
      body += data; // 콜백이 실행할 때마다 추가
    });
    request.on("end", function () {
      // 마지막 수신
      var post = qs.parse(body);
      console.log(post);
    });
    response.writeHead(200); // 파일을 성공적으로 전송
    response.end("success");
  }

------------------------------------------------------------------------------------------------------------------
[NodeJS-33: App 제작-파일 생성과 리다이렉션]

* Re-Direction
- 사용자가 페이지로 오고 일을 끝낸 후 서버가 사용자를 다른 페이지로 보내는 것

ex) 사용자를 다른 곳으로 re-direct
response.writeHead(302, { Location: `/?id=${title}` }); // 302: 리다이렉션

------------------------------------------------------------------------------------------------------------------
[NodeJS-34, 35, 36: App 제작-글 수정]

* 글 수정
- title 수정
ex) title == id 이므로 구분해서 값을 바꾸도록 한다.
  <input type="hidden" name="id" value="${title}">    // 사용자에 의해 id값 변경 X: hidden을 통해 숨김
  <p>
    <input type="text" name="title" placeholder="title" value="${title}">
  </p>
- 이후에 rename을 하고 콜백함수로 클라이언트를 리다이렉션 해준다.
- fs.rename({oldPath}, {newPath}, function (err){}): 파일명 변경 함수

------------------------------------------------------------------------------------------------------------------
[NodeJS-37, 38: App 제작-글 삭제: 삭제 버튼 구현]

* 삭제 기능 구현
- 삭제는 create, update와 같이 link로 구현 절대 X: 캐싱으로 인해 목표 파일이 아닌 다른 파일의 삭제를 불러 일으킨다.
- 버튼 기능으로 delete 구현 -> CSS로 스타일 꾸미기

ex) <form>을 이용한 이벤트 처리
  <form action="/delete_process" method="post">
    <input type="hidden" name="id" value="${title}">
    <input type="submit" value="delete">
  </form>

ex) unlink를 통해서 파일 삭제
  fs.unlink(`public/data/${id}`, function (err) {
    response.writeHead(302, { Location: `/` }); // 302: 리다이렉션 --- 클라이언트를 '/'로 보낸다.
    response.end();
  });
- fs.unlink({delete file path}, call-back function): 파일 삭제

------------------------------------------------------------------------------------------------------------------
[NodeJS-39: JavaScript 객체의 형식]




------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
Node.JS <모듈 1 : 기초>

Node.JS 모듈 : Node.JS가 개발하기 쉽게 만든 부품
- Node.Js에서만 사용 가능.
- 모듈은 바뀔 필요가 없기에 const 변수에 할당한다.
- Node.JS의 Document에 메뉴얼이 있다.

const http = require('http');		// 'http' 모듈을 require한다. const 변수(상수)에 할당.
var os = require('os');		// 'os' 모듈 require함.
console.log(os.platform());		// 현재 OS 종류 출력

------------------------------------------------------------------------------------------------------------------
Node.JS <모듈 2 : NPM 소개>

NPM(Node Package Manager)
- Node계의 앱스토어?
- 다른 개발자들이 만든 모듈 or 독립적인 애플리케이션을 설치하는 도구
- 설치, 삭제, 업그레이드, 의존성 관리 가능.

JavaScript 모듈 : ex. Date, String, Array
- JavaScript가 동작하는 어떤 프레임워크에서 적용 가능.

' npmjs.com ' : 모듈 or 독립적인 애플리케이션을 검색 or 다운받는 사이트.

------------------------------------------------------------------------------------------------------------------
Node.JS <모듈 3 : NPM 독립적인 앱 설치>

npm install ( ) -g 		// global로 설치(컴퓨터 전역에서 사용, 독립적인 소프트웨어)
npm install ( )		// no -g : 프로젝트 안에서 부품으로 사용.(Local)

예제
uglify-js : 코드를 못생기게 한다.(줄 바꿈(\n), tab(\t) 삭제) -> 코드의 자원 감소
- 실행을 위한 필수적인 코드를 제외한 모든 공백들 다 제거
- 변수 이름 변화(짧게)

npm install uglify-js -g	// uglify-js 설치(-g : 전역적으로)

콘솔 실행
uglifyjs ( 1 ).js		// 실행
uglifyjs ( 1 ).js -m		// 변수명을 짧게 minimize함.
uglifyjs ( 1 ).js -o ( 2 ).js	// ( 1 ).js를 uglify한 것이 ( 2 )에 저장.

------------------------------------------------------------------------------------------------------------------
Node.JS <모듈 4 : NPM으로 모듈 설치>

Directory에서 npm init : package.json을 만드는 역할.
-> name : ( ) 나오면 Enter
-> version : ( ) 나오면 Enter
-> description : 나오면 Enter or 쓰고 Enter
-> entry point : ( ) 나오면 어떠한 JS Script가 패키지를 구동시키는 건지 지정(나중에 바꿀 수 있다.)
-> test command : 나오면 이 패키지에서 어떤 명령어를 실행해서 테스트 할 것인가를 지정
-> git repository : ( ) 나오면 git repository 주소를 지정
-> keywords : 나오면 Enter
-> author : 나오면 Enter
-> license : ( ) 나오면 Enter
-> yes Enter
-> package.json 파일이 생성됨.

* npm으로 설치를 하면 프로젝트에 해당 모듈의 폴더가 생기며 설치된다.

underscore : 
-> npm install underscore			// underscore module이 project에 포함.
-> extraneous가 뜨면 npm install underscore --save	// dependencies가 추가됨(프로젝트에 반드시 필요할 경우 사용)

------------------------------------------------------------------------------------------------------------------
Node.JS <모듈 5 :모듈 사용법>

* Menual 보면서 사용법 찾기.
const var _ = require('underscore');		// underscore module을 가져오고 객체를 반환함.(_라는 변수명을 사용하는 관습)
var arr = [3, 6, 9, 1, 12];

Console.log(arr[0]);				// 배열의 첫 번째 원소 출력
Console.log(_.first(arr));			// 배열의 첫 번째 원소 출력
Console.log(arr[arr.length-1]);		// 배열의 마지막 원소 출력
Console.log(_.last(arr));			// 배열의 마지막 원소 출력

* npm 설치 비교
npm init			// 폴더를 intialize (필수로 먼저하기)
npm install ( )		// ( )모듈을 프로젝트에 부품으로 사용.
npm install ( ) -g		// ( )모듈을 전역적으로 실행할 수 있는 독립적인 소프트웨어로 패키지 설치.(npm init 필요x)
npm install ( ) --save	// ( )모듈을 의존성을 표시해서 다른 디렉토리에서 사용할 경우 쉽게 가져옴.

------------------------------------------------------------------------------------------------------------------
Node.JS <콜백(Callback)>

* Console에 파일이름을 정하지 않고 node라고 치면 Console에서 한 줄씩 JavaScript를 작성할 수 있다.

Console에서 node + Enter
a = [3, 1, 2]; a.sort(); console.log(a);	// a(3, 1, 2)를 오름차순 정렬(Default)
-> [ 1, 2, 3 ]

a = [3, 1, 2]; function b(value1, value2){ return value2 - value1; }; a.sort(b); console.log(a);	// b function의 return 값의 부호를 보고 정렬(return을 0으로 주면 정렬 X)
-> [ 3, 2, 1 ]

a = [3, 1, 2]; function b(value1, value2){ console.log('c', value1, value2); return value2 - value1; }; a.sort(b); console.log(a);	// b function의 return 값의 부호를 보고 정렬
-> c 3 1
-> c 1 2
-> [ 3, 2, 1 ]

a = [3, 1, 2]; a.sort(function(value1, value2){ return value2 - value1; };); console.log(a);	// 익명 함수(콜백 함수)의 return 값의 부호를 보고 정렬
-> [ 3, 2, 1 ]

콜백(Callback) 함수 : 누군가에게 호출될 함수.
- function b가 콜백 함수.
- sort 함수가 매개변수(function b)를 콜하고 백하기 때문.
- b라는 이름이 있다는 것은 나중에도 쓸 이유가 있다는 것.
- 이름이 없는 것은 익명 함수로 대부분 쓴다.
