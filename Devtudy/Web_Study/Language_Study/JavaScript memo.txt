------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-1 : 수업 소개]
- 사용자와 상호 작용하는 웹 페이지를 만들고 싶어 개발됐다.
- HTML은 정적이다.
- JavaScript를 이용하여 HTML을 상호 작용할 수 있는 상태로 만든다.

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-2 : 수업의 목적]
*JavaScript는 사람들과 상호 작용을 하기 위해 만든 언어이다.
*JavaScript는 HTML을 제어하는 언어이다.(동적으로 만들어준다)
- <input type="button" value="night" onclick="JavaScript code"> : "night"라는 이름의 버튼을 만든다. onclick은 JavaScript 코드가 들어간다.

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-3 : HTML과 JS의 만남 : script 태그]
* document
- document 객체는 웹 페이지 그 자체를 의미.
- 웹 페이지에 존재하는 HTML요소에 접근하고자 할 때, 반드시 document 객체 필요.

- <script> ~ </script> : JavaScript가 들어가는 태그
- document.write('hello world'); : hello world 출력
- document.write(1+1); : 2 출력
- HTML은 1+1 출력하면 영원히 1+1로 출력된다.

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-4 : HTML과 JS의 만남 : 이벤트]
- alert('') : 대화 상자가 뜬다.
- on...의 속성들은 event가 발생한다.

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-5 : HTML과 JS의 만남(콘솔)]
*F12에서 Console tab을 통해서 파일 없이 JavaScript를 실행할 수 있다.
*F12에서 Element tab에서 ESC를 눌러 Console을 추가로 켤 수 있다.
- JavaScript는 ' '를 넣으면 문자열이 된다.

------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-6 :데이터타입 : 문자열과 숫자]
- ' ' : 문자열

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-7 : 변수와 대입 연산자]
- var 변수명 : variable형 변수명을 선언

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-8 : 웹 브라우저 제어]
- 정적인 HTML을 JavaScript를 이용하여 동적화한다.

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-9 : CSS 기초 : style 속성]
- style의 속성을 통해서 디자인을 할 수 있다(태그 뒤에 삽입)

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-10 : CSS 기초(style 태그)]
* <div> vs <span> : block과 inline 차이
* <style> ~ </style>를 이용하여 한 번에 다 바꿀 수 있다.

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-11 : CSS 기초 : 선택자]
- ' # '은 id를 의미
- ' . '은 class를 의미
- class 선택자를 이용해서 광범위하게 효과를 주고 id 선택자를 통해서 예외적으로 처리한다(효율적이다)

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-12 : 제어할 태그 선택하기]
- document.querySelector('선택자 명') : 해당 선택자를 질의
- document.querySelector('선택자 명').style : 해당 선택자의 스타일 속성을 정의한다.
- document.querySelector('선택자 명').style.color = '색깔': 글꼴 색 지정
- document.querySelector('선택자 명').style.backgroundColor = '색깔': 배경 색 지정

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-13 : 프로그램, 프로그래밍, 프로그래머]
- Program : 시간의 흐름 순서
- Programming : 순서를 만드는 행위
- Programer : 순서를 만드는 사람

* HTML vs JavaScript
- HTML, JavaScript는 컴퓨터 언어이다.
- JavaScript는 컴퓨터 언어이면서 프로그래밍 언어이다(HTML은 아니다)
- HTML은 시간의 순서에 따라서 쓰이지 않는다.
- JavaScript는 시간의 순서에 따라서 쓰인다.(사람과 상호 작용)

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-14 : 조건문 예고]

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-15 : 비교 연산자와 불리언]
* 비교 연산자
- '===' or '==' : '===' 쓰는 것을 권장하고 있다.
- < or >, <= or >=

* JavaScript Data type
- Number : variable(변수)
- String : 문자열
- Boolean : 'true' or 'false'(참 or 거짓)

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-16 : 조건문]
- <br> : 개행
- if(Boolead){} else{} : 조건문

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-17 : 조건문의 활용]
* id 값을 지정하여 if 조건문 활용
1. <input id = "id 명" .... : id를 지정
2. document.querySelector('#id 명').value : id의 value값 get!
3. if(value 값 비교) : 비교 연산자를 사용하여 Boolean의 결과 값 도출

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-18 : 리팩토링 중복의 제거]
- this 참조자를 통해 코드를 작성하여 유지보수하기 편리하다.
- 중복되는 것을 var로 할당 받아 변수로 적용한다.

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-19 : 반복문 예고]
- 배열과 반복문을 통해서 효율적인 코드 작성을 한다.

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-20 : 배열]
* 배열(Array)
- 수납 상자
- var 변수 명 = [...]; : 배열 선언
- 변수 명.push(...); : 배열에 Input
- 변수 명.length; : 배열 크기(원소 개수)

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-21 : 반복문]
*반복문
- while(Boolean boolean){ ... }
- for(var i=0; i<N; i++){ ... }

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-22 : 배열과 반복문]
* ex)
var i = 0;
while(i < coworkers.length){
  coworkers[i];
}

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-23 : 배열과 반복문의 활용]
* ex)
var aList = document.querySelectorAll('a');
    var i = 0;
    while(i<aList.length){
      // console.log(aList[i]);
      aList[i].style.color = 'powderblue'; 
      i++;
    }

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-24 : 함수 예고]
* 함수
- function 함수 명(매개변수){ ... } : 함수 선언
- 함수 명(매개 변수); : 함수 사용

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-25 : 함수]
- 비연속적인 곳에 사용할 때는 반복문이 안되므로 함수 사용

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-26 : 함수:매개변수와 인자]
*매개 변수
- Parameter
- 인자를 받아서 함수 안에서 매개해주는 값.
- 타입을 따로 명시하지 않는다.(인자의 타입을 검사하지 않는다)
- 매개 변수의 기본 값은 'undefined' 다.

*인자
- Argument
- 전달하는 값.

* 매개변수와 인자는 입력(Input)값이다.

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-27 : 함수(리턴)]
* 반환
- return
- 돌려주는 출력(Output) 값

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-28 : 함수의 활용]
* ex)
function nightDayHandler(self) {
        var target = document.querySelector("body");
        if (self.value == "night") {
          target.style.backgroundColor = "black";
          target.style.color = "white";
          self.value = "day";
          var aList = document.querySelectorAll("a");
          var i = 0;
          while (i < aList.length) {
            // console.log(aList[i]);
            aList[i].style.color = "powderblue";
            i++;
          }
        } else {
          target.style.backgroundColor = "white";
          target.style.color = "black";
          self.value = "night";
          var aList = document.querySelectorAll("a");
          var i = 0;
          while (i < aList.length) {
            // console.log(aList[i]);
            aList[i].style.color = "blue";
            i++;
          }
        }
      }

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-29 : 객체 예고]
* 객체를 쓰는 이유
- 정리 정돈 하기 위해서
- 객체 안의 함수는 '메소드(method)'라고 부른다.

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-30 : 객체 쓰기와 읽기]
* 객체 생성
- 배열은 [], 객체는 { ... } 쓴다.

ex)
var coworkers = {
        programer : "Louis",  // key : value
        designer : "Ryul",    // key : value
      };

* Input data
- coworkers.manager = 'Choi'; :: 일반적인 Input data
- coworkers["data scientist"] = "Seong"; : Space가 있는 것은 배열 접근으로 넣어준다.

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-31 : 객체와 반복문]
* 객체의 데이터를 순회
- ex)
for(var key in Object){
  document.write(key + " : ");
  document.write(Object[key] + "<br>");
}

[JavaScript-32 : 객체 프로퍼티와 메소드]
- Property : 객체에 소속된 변수
- Method : 객체에 소속된 함수

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-33 : 객체의 활용]
ex 1)
var Links = {
        setColor: function (color) {
          var aList = document.querySelectorAll("a");
          var i = 0;
          while (i < aList.length) {
            // console.log(aList[i]);
            aList[i].style.color = color;
            i++;
          }
        },
      };

ex 2)
var Body = {
        setColor: function (color) {
          document.querySelector("body").style.color = color;
        },
        setBackgroundColor: function (color) {
          document.querySelector("body").style.backgroundColor = color;
        },
      };

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-34 : 파일로 쪼개서 정리 정돈하기]
1. .js script를 만들어서 Javascript를 작성한다.
2. <script src = "..."></script>

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-35 : 라이브러리와 프레임워크]
* Library vs Framework
- 라이브러리 : 정해진 법칙 X
- 프레임워크 : 정해진 법칙 O 

* jQuery : 라이브러리(Javascript)
- CDN 서비스 : 한 줄의 <script src = "..."></script>로 jQuery를 쓸 수 있다.
ex 1) - Microsoft의 CDN 서비스
<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.5.0.js"></script>
을 .html 파일의 <head> 태그 안에 삽입한다.

ex 2) - jQuery 예시
var aList = document.querySelectorAll("a");
    var i = 0;
    while (i < aList.length) {
      // console.log(aList[i]);
      aList[i].style.color = color;
      i++;
    }
를 단 한 줄로 바꿀 수 있다.
----> $("a").css("color", color);

- jQuery는 새로운 언어가 아니고 Javascript로 작성된 것이다.
- 직관적으로 볼 수 있는 장점이 있다.

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-36 : UI vs API]
* UI vs API
- UI : User Interface
- API : Application Programming Interface

ex) 
<input
  type = "button" 
  value = "Click me" 
  onclick = "alert('Hello world')
  "
  />
에서 alert 함수는 API라 한다.

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript-37 : 수업을 마치며]
- document 객체 : 웹 페이지에 있는 태그를 삭제하거나 추가할 경우 검색
- DOM 객체 : document 부모 객체.
- window 객체 : 웹 페이지의 주소, 웹 브라우저에 대해 화면 크기 등등 알기 위해서 검색
- ajax : 웹 페이지를 Reload하지 않고 정보를 변경하고 싶을 때
- cookie : 웹 페이지가 Reload되어도 현재 상태를 유지하고 싶을 때(개인화된 서비스 제공)
- offline web application : 인터넷이 끊겨도 동작하는 웹 페이지
- webRTC : 화상 통신 웹 애플리케이션을 만들고 싶을 때
- speech(API) : 사용자의 음성을 인식하고 정보를 전달하고 싶을 때
- webGL : 웹의 3차원의 게임을 만들고 싶을 때
- webVR : 웹의 가상 현실

------------------------------------------------------------------------------------------------------------------------------------------
==========================================================================================================================================
------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript Immutability-1: 수업 소개]

* Mutability vs Immutability
- Mutability: 가변, 데이터가 변함, 변수
- Immutability: 불변, 데이터가 변하지 않음, 상수
- 불변 : 무질서와 삭제로 인해 원본이 훼손되는 것을 막는다.

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript Immutability-2: const vs var. Name의 불변]

* var vs const : name의 가변, 불변
- var(가변)
ex) var v = 1;
v = 2;
v: name
1: value

- const(불변)
ex)
const v = 1;
v = 2; --- Error 발생(v의 value 변경 X)

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript Immutability-3: Value의 불변]

* Type(Primitive vs Object)
- Primitive: 메모리에 이미 할당돼있음, 같은 값->같은 메모리를 가리킴.
1) Number
2) String
3) Boolean
4) Null
5) Undefined
6) Symbol

- Object: 메모리를 생성 시 할당, 같은 값->다른 메모리를 가리킴.
1) Object
2) Array(배열)
3) Function

* Immutable하게 객체 생성
ex) 복사 생성
var o1 = {name: 'choi'};
var o2 = Object.assign({}, o1);
- Object.assign([target], [source]): target: 반환될 객체, source: 복사할 대상
- o1의 내용을 복사하여 다른 메모리에 할당한 후 o2가 가리키게 한다.

ex) value에 객체(Object type)가 있을 경우
var o1 = {name: 'choi', score:[1, 2]};
var o2 = Object.assign({}, o1);
o2.score = o2.score.concat();   // 인자(argument)값이 없으므로 복제 역할
- concat(argument): Array의 push와 같은 역할, concat(enate): 사슬같이 연결하다.
- Object.assign()을 쓰면 Array의 기능들을 사용 X(Array type이 아닌 Object type이므로)
- Array.slice(), Array.from() 등을 사용(for. use Array의 기능)

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript Immutability-4: 불변의 함수]

* 가변 함수
ex)
function fn(person){
  person.name = 'lee';
}
var o1 = {name: 'choi'};
fn(o1);
- o1의 name이 변경

* 불변 함수
function fn(person){
  var o2 = Object.assign({}, person);
  o2.name = 'lee'
  return o2;
}
var o1 = {name: 'choi'};
var o2 = fn(o1);
- o1을 복사하여 복사한 것의 name을 변경 후 반환
- o1의 name이 변경 X

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript Immutability-5: 가변과 불변 API 비교]

* 객체의 복제 api
- Object type의 복제 api
1) Object.assign()

- Array type의 복제 api
1) Array.concat()
2) Array.slice()
3) Array.from()

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript Immutability-6: Object.freeze()]

* Object.freeze(Object object)
- Object.freeze: 객체의 값이 바뀔 수 없다. 풀 수도 없다(복제해서 대체해야된다)
ex)
var o1 = {name: 'choi', score: [1, 2]};
Object.freeze(o1);    // 객체를 얼림
o1.name = 'lee';      // 값이 바뀌지 않음
o1.score.push(3);     // 값이 바뀜(다른 객체)
Object.freeze(o1.score)   // score 객체도 얼린다.

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript Immutability-7: const vs Object.freeze()]

* const vs Object.freeze()
- const: 가리키는 것을 규제(name의 불변)
- Object.freeze(): 값을 규제(value의 불변)

ex)
const o1 = {name: 'choi'};
const o2 = {name: 'kim'};
Object.freeze(o1);
o1 = o2;      // const 떄문에 Error, o1이 var로 선언되면 해결
o1.name = 'lee';    // Object.freeze() 때문에 Error, o1이 freeze()를 안하면 해결

------------------------------------------------------------------------------------------------------------------------------------------
[JavaScript Immutability-8: 수업을 마치며]

* 불변과 가변
- 극단적인 장점으로만이 아닌 적당한 균형을 유지해서 사용

* Keywords
- Functional Programming: 함수를 부품으로 사용
- Pure function

------------------------------------------------------------------------------------------------------------------------------------------