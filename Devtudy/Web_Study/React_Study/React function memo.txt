------------------------------------------------------------------------------------------------
[React Function Style-1: 수업 소개]

* React 사용 방법
1) Class 문법 이용
- Class 문법을 알아야함.
- state 사용 가능
- Life Cycle API 사용 가능

2) Function 문법 이용
- Component 내부의 state를 사용 X -> hook으로 사용 가능해짐
- Life Cycle API 사용 X -> hook으로 사용 가능해짐

------------------------------------------------------------------------------------------------
[React Function Style-2: 수업의 목표]

* 프로젝트 시작
1) npx create-react-app ./ : 현재 디렉토리에서 app 프로젝트 생성(임시)
2) npm run start : 시작

* Component구현(Function vs Class)
- Function은 return만 해주면 된다.(자신이 render() 함수다)
ex) Function
function FuncComp() {
  return (
    <div className="container">
      <h2>function style component</h2>
    </div>
  );
}

- Class는 component class를 상속받고 render(){return;}을 해주어야한다.
ex) Class
class ClassComp extends Component {
  render() {
    return (
      <div className="container">
        <h2>class style component</h2>
      </div>
    );
  }
}

------------------------------------------------------------------------------------------------
[React Function Style-3: state 사용]

* props 사용
- Function: 매개 변수로 props 읽는다.
ex)
function FuncComp(props) {
  return (
    <div className="container">
      <h2>function style component</h2>
      <p>Number: {props.initNumber}</p>
    </div>
  );
}

- Class: this.props로 참조하여 읽는다.
ex)
class ClassComp extends Component {
  render() {
    return (
      <div className="container">
        <h2>class style component</h2>
        <p>Number: {this.props.initNumber}</p>
      </div>
    );
  }
}

* 클래스에서 state 사용
- bind(this)를 통해서 this.setState를 한다.
ex) 버튼으로 Random한 수로 state 변경
class ClassComp extends Component {
  state = {
    number: this.props.initNumber,
  };
  render() {
    return (
      <div className="container">
        <h2>class style component</h2>
        <p>Number: {this.state.number}</p>
        <input
          type="button"
          value="random"
          onClick={function () {
            this.setState({ number: Math.random() });
          }.bind(this)}
        />
      </div>
    );
  }
}

* 함수에서 state 사용(hook 이용)
- useState(): 내장된 hook,
Array[2]를 return한다.
[0]: props 값(참조하여 사용 가능), useState(variable)에서 variable 값이다.
[1]: state 값을 바꿀 수 있는 함수
- 매개 변수에 있는 것을 Class랑 동일하게 참조하여 현재 state값을 알 수 있다.

ex)
import React, { useState } from "react";    // for useState

  var numberState = useState(props.initNumber);
  var number = numberState[0];
  var setNumber = numberState[1]; 

  var [number, setNumber] = useState(props.initNumber);   // 위에 3개를 축약

  setNumber(Math.random()); // state 쓰기

------------------------------------------------------------------------------------------------
[React Function Style-4: Life Cycle(Class vs Function) 구현]

* react의 render()가 두 번 호출되는 이유
- index.js의 <React.scriptMode>로 인해서 한 번 더 호출된다.

* Life Cycle
- 생명 주기: 함수 호출 순서

* 클래스에서 라이프 사이클 구현
- componentWillMount(): render() 전, 실행되는 함수
componentWillMount(){
  // TODO
}

- componentDidMount(): render() 후, 실행되는 함수
componentDidMount(){
  // TODO
}

- shouldComponentUpdate(): props, state가 변하면, 실행되는 함수(성능과 관련)
shouldComponentUpdate(prevProps, prevState){
  // TODO
  return false;   // render() 호출 X
  return true;    // render() 호출 O
}

- componentWillUpdate(): shouldComponentUpdate()의 return true면 render() 전, 실행되는 함수
componentWillUpdate(prevProps, prevState){
  // TODO
}

- componentDidUpdate(): shouldComponentUpdate()의 return true면 render() 후, 실행되는 함수
componentDidUpdate(prevProps, prevState){
  // TODO
}

- componentWillUnmount(): 종료 후에 호출됨(clean up 작업)
componentWillUnmount(){
  // TODO
}

* 함수에서 라이프 사이클 구현
- useEffect(): render() 전, 호출된다.
useEffect(function(){
  // TODO

  return function(){};
}), [variable];
- side effect로서 작용한다.(return은 메인)
- 복수 개를 정의해서 호출 가능
- componentDidMount, componentDidUpdate와 같은 효과
- return function(){}: clean up 작업(이전에 호출된 useEffect()의 // TODO 의 정리하는 작업)
- [variable]: variable의 값이 바뀌어야 useEffect()는 호출된다(componentDidMount처럼 사용: 빈 배열[] 사용)

------------------------------------------------------------------------------------------------
[React Function Style-5: 총 정리]

- hook은 여러 가지 종류가 있고 만들 수도 있다.

ex) 버튼에 따라 컴포넌트 render() 호출 유무
function App() {
  var [funcShow, setFuncShow] = useState(true);
  var [classShow, setClassShow] = useState(true);
  return (
    // funcShow, classShow가 true일 경우 실행
    <div className="container">
      <h1>Hello World</h1>
      <input
        type="button"
        value="remove func"
        onClick={function () {
          setFuncShow(false);
        }}
      />
      <input
        type="button"
        value="remove class"
        onClick={function () {
          setClassShow(false);
        }}
      />
      <input
        type="button"
        value="Insert func"
        onClick={function () {
          setFuncShow(true);
        }}
      />
      <input
        type="button"
        value="Insert class"
        onClick={function () {
          setClassShow(true);
        }}
      />
      {funcShow ? <FuncComp initNumber={2} /> : null}
      {classShow ? <ClassComp initNumber={2} /> : null}
    </div>
  );
}

------------------------------------------------------------------------------------------------