---------------------------------------------------------------------
[Webpack-1: 수업 소개]

* Bundler
- 여러 개의 파일을 묶어주는 도구
- Input -> Process(Webpack) -> Output
- 종류:
1) Webpack: 여러 가지 Web을 만드는 자원들을 하나의 묶음으로 만들어준다.
2) Broserify
3) Parcel


---------------------------------------------------------------------
[Webpack-2: Webpack 이전의 세계와 모듈의 개념]

* Webpack 이전의 상태
- 이름(변수)의 충돌
- Web은 폴더 기능이 없는 파일시스템으로 볼 수 있다.

ex) hello.js
var word = 'Hello';

ex) world.js
var word = 'World';

ex) word에 접근하면 "World" 출력(덮어씌움)
  <head>
    <script src="./src/hello.js"></script>
    <script src="./src/world.js"></script>
  </head>

* 모듈(독립적)
- 같은 파일 내에서만 접근 가능
- 오래된 웹 브라우저는 동작 X

ex) hello.js
var word = 'Hello';
export default word;

ex) world.js
var word = 'World';
export default word;

ex) 모듈 사용으로 변수로 할당.(word에 접근 불가)
  <script type="module">
    import hello_word from "./src/hello.js";
    import world_word from "./src/world.js";
    document.querySelector("#root").innerHTML = `${hello_word} ${world_word}`;
  </script>

---------------------------------------------------------------------
[Webpack-3: Webpack의 도입]

1) [npm init]
2) [npm install -D webpack webpack-cli]: -D는 개발 옵션
3) index.js(Entry 파일)을 만들어 import한다.
4) [npx webpack --entry ./src/index.js --output ./public/index_bundle.js]
- entry파일로는 index.js, output파일로는 index_bundle.js파일로 빌드한다.

5) index.html에서 <script src="./public/index_bundle.js"></script> 을 작성한다.
- 사용자 입장에서는 index_bundle.js만을 다운받는다.

---------------------------------------------------------------------
[Webpack-4: 설정파일 도입]

* [npx webpack --entry ./src/index.js --output ./public/index_bundle.js]와 같은 config 파일
ex) [webpack.config.js]
  const path = require("path");

  module.exports = {
    entry: "./source/index.js",
    output: {
      path: path.resolve(__dirname, "public"), // __dirname의 하위 public에 output지정
      filename: "index_bundle.js",
    },
  };
- __dirname: webpack.config.js의 경로
- [npx webpack]으로 실행 가능: config 파일을 지정했기 때문

---------------------------------------------------------------------
[Webpack-5: 모드의 도입]

* 모드(목적에 따라서)
- development: 개발
- production: 서비스(default=non)

ex) development 지정
  module.exports = {
    mode: "development",
  }

- [npx webpack --config (config 파일 URL)]
: webpack.config.js파일을 여러 개 만들고 적당한 모드를 스위칭할 수 있다.

---------------------------------------------------------------------
[Webpack-6: 로더의 도입]

- /src/ 에 있는 파일들은 bundling할 파일들이다.

* Loader
- 다양한 파일을 Web에 첨가할 수 있게 도와줌
- ex) css, image, ...

ex) css-loader, style-loader 사용
1) 설치: [npm install --save-dev style-loader css-loader]
--save-dev: -D와 같다.
2) webpack.config.js 수정
  module: {
    rules: [
      {
        test: /\.css$/,   // 확장자가 css라면
        use: ["style-loader", "css-loader"],    // 뒤에부터 로딩된다(css부터)
      },
    ],
  },
- css가 html에 삽입된다.
- css-loader: css파일을 읽어서 webpack으로 가져온다.
- style-loader: web browser에 합친다.

---------------------------------------------------------------------
[Webpack-7: output 설정]

- 여러 개의 output파일을 만들 수 있다.
ex) webpack.config.js 수정
  entry: {
    index: "./src/index.js",
    about: "./src/about.js",
  },
  output: {
    path: path.resolve(__dirname, "public"),
    filename: "[name]_bundle.js",
  },
- entry 파일들이 여러 개 있으면 객체로 만든다("{}" 이용)
- [name]: filename으로 만들겠다는 약속

---------------------------------------------------------------------
[Webpack-8: 플러그인의 도입]

* Loader vs Plugin
- Loader: output파일을 만드는 과정에서 사용
- Plugin: output에서 변환한다.(복합적이고 자유롭다)

ex) Html Webpack Plugin
- 자동으로 Html파일을 생성하게 함
1) 설치: [npm install -D html-webpack-plugin]
2) webpack.config.js 수정
ex) [webpack.config.js]
const HtmlWebpackPlugin = require("html-webpack-plugin");

  plugins: [
    new HtmlWebpackPlugin({
      template: "./src/index.html",
      filename: "./index.html",
      chunks: ["index"],
    }),
    new HtmlWebpackPlugin({
      template: "./src/about.html", // 탬플릿 지정
      filename: "./about.html",   // 최종적인 파일명
      chunks: ["about"],
    }),
  ],

---------------------------------------------------------------------
[Webpack-9: 선물]

* 자동 컴파일
[npx webpack --watch]: Webpack이 자동으로 컴파일 해준다.

---------------------------------------------------------------------
[Webpack-10: npm 패키지 사용]

* npm으로 설치한 부품들을 사용
- Webpack을 이용하여 사용 가능하다.
ex) lodash: javascript의 utility library
1) 설치: [npm install lodash]
2) import로 삽입
ex) [index.js]
  import _ from "lodash";

3) [npx webpack]으로 bundling하면 lodash를 사용한 js파일을 Web에서 사용가능하다.
---------------------------------------------------------------------
[Webpack-11: 수업을 마치며]

* Keywords
1) DevServer: 
- Web Server: 웹 서버 역할
- live reload: 자동으로 리로드 ex) Live Server
- hot module replacement: 수정된 부분만 바뀜

2) Code splitting:
- bundling으로 너무 큰 파일이 될 경우 분할한다.

3) Lazy loading:
- 분할된 파일들은 필요할 때마다 로딩

---------------------------------------------------------------------
