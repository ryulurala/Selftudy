[Unity]

<기본 캐릭터 움직임>
Unity에서는 X가 좌, 우 // Z가 정면과 뒤 // Y가 점프(공중)

Debug.Log(인자);
- 인자 값을 콘솔창에 찍음

[SerializeField]
- private로 선언해도 인스펙터 창에서 쉽게 쓰게 한다.(예외도 있다.)

Rigidbody
- Collider로 충돌 영역을 설정하고 Rigidbody로 Collider에 물리학을 입힘

myRigid = GetComponent<Rigidbody>();
- Rigidbody Component를 myRigid에 적용

float _moveDirX = Input.GetAxisRaw("Horizontal");
- (Horizontal : ←(1), →(-1) or A(1), D(-1) 등)의 입력이 이루어지면 1과 -1, 안눌리면 0이 Return (Vertical은 반대)

Vector3 _moveHorizontal = transform.right * _moveDirX;
- transform(위치)의 right값(1, 0, 0)과 입력이 눌리는 값과 곱한 것이 Vector에 ( , , )에 저장

transform.forward는 (0, 0, 1)을 뜻함 = transform.TransformDirection(Vector3.forward)

Vector3 _velocity = (_moveHorizontal + _moveVertical).normalized * walkSpeed;
- normalized는 방향이 같고 1로 정규화 시켜줌(1초에 얼마나 이동시킬건지 값을 지정해줄 수 있는 편의)

myRigid.MovePosition(transform.position + _velocity * Time.deltaTime);
- MovePosition은 Position을 움직여주고 Time.deltaTime(약 0.016)은 조금씩 움직일 수 있도록 함(순간적인 이동 방지)

private float lookSensitivity
- 마우스를 순식간에 움직이지 못하도록 민감도 지정

currentCameraRotationX = Mathf.Clamp(currentCameraRotationX, -cameraRotatonLimit, cameraRotationLimit);
- 첫 번째 인자 값을 두 번째 인자 값과 세 번째 인자 값 사이로 가둔다.

theCamera.transform.localEulerAngles = new Vector3(currentCameraRotationX, 0f, 0f);
- transform.localEulerAngles는 간단하게 transform에 있는 Rotation 3좌표를 뜻함

Rotation은 내부적으로 Quaternion값(사원수)을 가진다.

<심화 캐릭터 움직임>

if(Input.GetKey(KeyCode.LeftShift)){} - GetKey는 누르고 있으면 계속 눌림 GetKeyDown은 한 번 눌림
- LeftShift의 KeyCode를 얻어 눌러있는지 Return

if(Input.GetKeyUp(KeyCode.LeftShift)){}
- LeftShift의 KeyCode를 얻어 떼어졌을때를 Return

isGround = Physics.Raycast(transform.position, Vector3.down, capsuleColider.bounds.extents.y + 0.1f);
- Physics클래스의 Raycast는 레이저를 쏘고 첫 번째 인자 위치에서 두 번째 인자 위치방향으로 캡슐의 바운드의 반의 0.1f(여유)만큼 쏜다.

transform.position vs transform.localposition
- transform의 default position 값은 world 기준이지만 player안에 내부 객체로 생성되면 player기준으로 측정된다. 따라서 local을 써서 상대적인 기준(Player)으로 사용

IEnumerator CrouchCoroutine(){}
- 병렬처리를 위한 함수(실제로 CPU가 병렬처리 하지 않음)
- StartCoroutine(인자) : 인자코루틴을 실행

yield return new WaitForSeconds(1f);
- 1초를 기다림

Mathf.Lerp(1, 2, 0.5)
- 1에서 2까지 0.5의 비율로 감(1->1.5->1.75->....->2)

<지형 제작>

<팔 구현>

private RaycastHit hitInfo;
- 레이저를 쏴서 닿은 정보가 hitInfo에 저장 

currentHand.anim.SetTrigger("Attack");
- currentHand 클래스의 anim에 있는 상태변수 Trigger를 "Attack"으로 발동시킴

[명중 & 피격 이펙트]

4번 째 인수 이용
Instantiate(hit_effect_prefab(생성할 오브젝트), hitInfo.point(오브젝트가 생성될 위치), lookRotation(hitInfo.normal)(오브젝트가 생성되는 방향))
- point는 충돌한 곳의 실제 좌표, lookRotation(hitInfo.normal)는 특정한 객체(hitInfo.normal)를 바라봄, hitInfo.normal은 충돌한 위치의 표면

[Weapon Manager]

private Dictionary<string, Gun> gunDictionary = new Dictionary<string, Gun>();
- string이 key다(다른 형으로 가능), gunDictionary는 이름
- 저장 : gunDictionary.Add("AK47", guns[0]);
- 사용 : gunDictionary["AK47"]

public static transform currentWeapon;
- transform형은 가장 기본적인 컴포넌트 형이다.

- Quaternion.Angle : 두 개의 Rotation a와 b 사이의 각도를 반환
- Quaternion.Euler : z축 주위로 z, x축 주위로 x, y축 주위로 y각도만큼 회전한 Rotation 반환
- Quaternion.Slerp : from과 to 사이의 t로 구형 보간
