[JavaScript-1 : 수업 소개]
- 사용자와 상호 작용하는 웹 페이지를 만들고 싶어 개발됐다.
- HTML은 정적이다.
- JavaScript를 이용하여 HTML을 상호 작용할 수 있는 상태로 만든다.

[JavaScript-2 : 수업의 목적]
*JavaScript는 사람들과 상호 작용을 하기 위해 만든 언어이다.
*JavaScript는 HTML을 제어하는 언어이다.(동적으로 만들어준다)
- <input type="button" value="night" onclick="JavaScript code"> : "night"라는 이름의 버튼을 만든다. onclick은 JavaScript 코드가 들어간다.

[JavaScript-3 : HTML과 JS의 만남 : script 태그]
* document
- document 객체는 웹 페이지 그 자체를 의미.
- 웹 페이지에 존재하는 HTML요소에 접근하고자 할 때, 반드시 document 객체 필요.

- <script> ~ </script> : JavaScript가 들어가는 태그
- document.write('hello world'); : hello world 출력
- document.write(1+1); : 2 출력
- HTML은 1+1 출력하면 영원히 1+1로 출력된다.

[JavaScript-4 : HTML과 JS의 만남 : 이벤트]
- alert('') : 대화 상자가 뜬다.
- on...의 속성들은 event가 발생한다.

[JavaScript-5 : HTML과 JS의 만남(콘솔)]
*F12에서 Console tab을 통해서 파일 없이 JavaScript를 실행할 수 있다.
*F12에서 Element tab에서 ESC를 눌러 Console을 추가로 켤 수 있다.
- JavaScript는 ' '를 넣으면 문자열이 된다.

[JavaScript-6 :데이터타입 : 문자열과 숫자]
- ' ' : 문자열

[JavaScript-7 : 변수와 대입 연산자]
- var 변수명 : variable형 변수명을 선언

[JavaScript-8 : 웹 브라우저 제어]
- 정적인 HTML을 JavaScript를 이용하여 동적화한다.

[JavaScript-9 : CSS 기초 : style 속성]
- style의 속성을 통해서 디자인을 할 수 있다(태그 뒤에 삽입)

[JavaScript-10 : CSS 기초(style 태그)]
* <div> vs <span> : block과 inline 차이
* <style> ~ </style>를 이용하여 한 번에 다 바꿀 수 있다.

[JavaScript-11 : CSS 기초 : 선택자]
- ' # '은 id를 의미
- ' . '은 class를 의미
- class 선택자를 이용해서 광범위하게 효과를 주고 id 선택자를 통해서 예외적으로 처리한다(효율적이다)

[JavaScript-12 : 제어할 태그 선택하기]
- document.querySelector('선택자 명') : 해당 선택자를 질의
- document.querySelector('선택자 명').style : 해당 선택자의 스타일 속성을 정의한다.
- document.querySelector('선택자 명').style.color = '색깔': 글꼴 색 지정
- document.querySelector('선택자 명').style.backgroundColor = '색깔': 배경 색 지정

[JavaScript-13 : 프로그램, 프로그래밍, 프로그래머]
- Program : 시간의 흐름 순서
- Programming : 순서를 만드는 행위
- Programer : 순서를 만드는 사람

* HTML vs JavaScript
- HTML, JavaScript는 컴퓨터 언어이다.
- JavaScript는 컴퓨터 언어이면서 프로그래밍 언어이다(HTML은 아니다)
- HTML은 시간의 순서에 따라서 쓰이지 않는다.
- JavaScript는 시간의 순서에 따라서 쓰인다.(사람과 상호 작용)

[JavaScript-14 : 조건문 예고]

[JavaScript-15 : 비교 연산자와 불리언]
* 비교 연산자
- '===' or '==' : '===' 쓰는 것을 권장하고 있다.
- < or >, <= or >=

* JavaScript Data type
- Number : variable(변수)
- String : 문자열
- Boolean : 'true' or 'false'(참 or 거짓)

[JavaScript-16 : 조건문]
- <br> : 개행
- if(Boolead){} else{} : 조건문

[JavaScript-17 : 조건문의 활용]
* id 값을 지정하여 if 조건문 활용
1. <input id = "id 명" .... : id를 지정
2. document.querySelector('#id 명').value : id의 value값 get!
3. if(value 값 비교) : 비교 연산자를 사용하여 Boolean의 결과 값 도출

[JavaScript-18 : 리팩토링 중복의 제거]
- this 참조자를 통해 코드를 작성하여 유지보수하기 편리하다.
- 중복되는 것을 var로 할당 받아 변수로 적용한다.

[JavaScript-19 : 반복문 예고]
- 배열과 반복문을 통해서 효율적인 코드 작성을 한다.

[JavaScript-20 : 배열]
* 배열(Array)
- 수납 상자
- var 변수 명 = [...]; : 배열 선언
- 변수 명.push(...); : 배열에 Input
- 변수 명.length; : 배열 크기(원소 개수)

[JavaScript-21 : 반복문]
*반복문
- while(Boolean boolean){ ... }
- for(var i=0; i<N; i++){ ... }

[JavaScript-22 : 배열과 반복문]
* ex)
var i = 0;
while(i < coworkers.length){
  coworkers[i];
}

[JavaScript-23 : 배열과 반복문의 활용]
* ex)
var aList = document.querySelectorAll('a');
    var i = 0;
    while(i<aList.length){
      // console.log(aList[i]);
      aList[i].style.color = 'powderblue'; 
      i++;
    }

[JavaScript-24 : 함수 예고]
* 함수
- function 함수 명(매개변수){ ... } : 함수 선언
- 함수 명(매개 변수); : 함수 사용

[JavaScript-25 : 함수]
- 비연속적인 곳에 사용할 때는 반복문이 안되므로 함수 사용

[JavaScript-26 : 함수:매개변수와 인자]
*매개 변수
- Parameter
- 인자를 받아서 함수 안에서 매개해주는 값.
- 타입을 따로 명시하지 않는다.(인자의 타입을 검사하지 않는다)
- 매개 변수의 기본 값은 'undefined' 다.

*인자
- Argument
- 전달하는 값.

* 매개변수와 인자는 입력(Input)값이다.

[JavaScript-27 : 함수(리턴)]
* 반환
- return
- 돌려주는 출력(Output) 값

[JavaScript-28 : 함수의 활용]
* ex)
function nightDayHandler(self) {
        var target = document.querySelector("body");
        if (self.value == "night") {
          target.style.backgroundColor = "black";
          target.style.color = "white";
          self.value = "day";
          var aList = document.querySelectorAll("a");
          var i = 0;
          while (i < aList.length) {
            // console.log(aList[i]);
            aList[i].style.color = "powderblue";
            i++;
          }
        } else {
          target.style.backgroundColor = "white";
          target.style.color = "black";
          self.value = "night";
          var aList = document.querySelectorAll("a");
          var i = 0;
          while (i < aList.length) {
            // console.log(aList[i]);
            aList[i].style.color = "blue";
            i++;
          }
        }
      }

[JavaScript-29 : 객체 예고]

[JavaScript-30 : ]
[JavaScript-31 : ]
[JavaScript-32 : ]
[JavaScript-33 : ]
[JavaScript-34 : ]
[JavaScript-35 : ]
[JavaScript-36 : ]
[JavaScript-37 : ]