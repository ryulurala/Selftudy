[OT]

------------------------------------------------------------------------------------------------------------------------
[서버 OT]

*서버 : 다른 컴퓨터에서 연결이 가능하도록 대기 상태로 상시 실행 중인 프로그램 (ex 영업 중인 식당)

*게임 서버의 종류
1. Web Server(aka. HTTP Server)
- 음식을 받고, 이후론 연락 끊김. 질의/응답 형태. (ex 테이크아웃 포장 전문 식당)
- 드물게 정보 요청/갱신.
- 먼저 접근할 일이 없다. (ex 물 따라드릴까요? 등)
- 실시간 Interaction X
- ASP.NET(C#), Spring(Java), NodeJS(JavaScript), Django, Flask(Python), PHP, ...
- Stateless

2. Game Server(aka. TCP Server, Binary Server, Stateful Server ...)
- 실시간 Interaction이 있다. (ex 일반 식당)
- 요청/갱신 횟수가 많다.
- 실시간 Interaction이 필요.
- 언제라도 직원이 손님한테 접근 가능.
- Stateful
- 게임/장르에 따라 요구 사항이 다르다.
- 최적의 프레임워크라는 것이 존재하기 힘듬.

*식당 = 게임 서버 비유
- 손님 한도 = 최대 동시 접속자
- 손님의 일행 한도(인테리어) = 게임 장르 및 채널링
- 직원 역할 = 게임 로직(요리사), 네트워크(서빙), DB(결제)
- 직원 수 = 쓰레드 개수
- 요리사/서빙/결제 직원 비율 = 쓰레드 모델
- 주문 받는 방법 = 네트워크 모델
- 손님이 기다리는 시간 한도 = 반응성(FPS, MMORPG, ...)
- 장부 및 결제 = DB
------------------------------------------------------------------------------------------------------------------------
[환경 설정]

- VS code에서 최상위 폴더를 만들고 Project 하위 폴더로 Server, ServerCore, DummyClient를 만든다.
- 각각 Project이므로 각 위치에서 "dotnet new console"로 프로젝트를 기반을 다진다.
- DummyClient는 Client역할을 한다.(500~1000명으로 인식되도록 패킷을 전달해준다)
- Server는 실질적인 서버
- ServerCore는 Server가 사용하는 핵심 기능들을 넣어 놓는다.
- "dotnet new sln"을 통해서 최상위 폴더에 솔루션 파일을 만든다
- "dotnet sln add csproj위치를 통해서 여러 프로젝트를 담는다.
------------------------------------------------------------------------------------------------------------------------






